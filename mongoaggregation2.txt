Aim: Implement aggregation and indexing with suitable example using MongoDB
Problem statement: Create a collection named “ORDERS” that contain documents of the following prototype and solve the following queries:
 {
  cust_id: "abc123",
  ord_date: new Date("Oct 04, 2012"),
  status: 'A',
  price: 50,
  items: [ { sku: "xxx", qty: 25, price: 1 },
           { sku: "yyy", qty: 25, price: 1 } ]
}
1.For each unique cust_id, sum the price field, results sorted by sum.
2.For each unique cust_id, ord_date grouping, sum the price field.
3.For cust_id with multiple records, return the cust_id and the corresponding record count.
4.For each unique cust_id with status A, sum the price field.


javascript

db.createCollection("ORDERS")

db.ORDERS.insertMany([
    { 
        cust_id: "abc123",
        ord_date: new Date("Oct 04, 2012"),
        status: 'A',
        price: 50,
        items: [ { sku: "xxx", qty: 25, price: 1 },
                 { sku: "yyy", qty: 25, price: 1 } ]
    },
    { 
        cust_id: "abc123",
        ord_date: new Date("Oct 04, 2012"),
        status: 'A',
        price: 75,
        items: [ { sku: "zzz", qty: 30, price: 2 },
                 { sku: "www", qty: 20, price: 2 } ]
    },
    { 
        cust_id: "def456",
        ord_date: new Date("Oct 05, 2012"),
        status: 'A',
        price: 100,
        items: [ { sku: "aaa", qty: 50, price: 2 },
                 { sku: "bbb", qty: 30, price: 2 } ]
    },
    // Insert more documents as needed
]);

Now, let's solve the queries:

    For each unique cust_id, sum the price field, results sorted by sum:

javascript

db.ORDERS.aggregate([
    { $group: { _id: "$cust_id", total_price: { $sum: "$price" } } },
    { $sort: { total_price: 1 } }
])

    For each unique cust_id, ord_date grouping, sum the price field:

javascript

db.ORDERS.aggregate([
    { $group: { _id: { cust_id: "$cust_id", ord_date: "$ord_date" }, total_price: { $sum: "$price" } } }
])

    For cust_id with multiple records, return the cust_id and the corresponding record count:

javascript

db.ORDERS.aggregate([
    { $group: { _id: "$cust_id", count: { $sum: 1 } } },
    { $match: { count: { $gt: 1 } } }
])

    For each unique cust_id with status A, sum the price field:

javascript

db.ORDERS.aggregate([
    { $match: { status: 'A' } },
    { $group: { _id: "$cust_id", total_price: { $sum: "$price" } } }
])